# Problem 12 - Highly divisible triangular number
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
#
# Answer: 76576500


# Method findDivisors() is like brute force on it is max level and it is very slow.
# With some further search in divisors we can make function numberOfDivisors which is faster than findDivisors.
# In problem12() we use numberOfDivisors() function.

import math

def findDivisors(number):
    i = 1
    upper_limit = number // 2
    upper_limit = upper_limit+1
    div_counter = 0
    while i<=upper_limit:
        if number % i == 0:
            div_counter = div_counter+1
        i = i+1
    div_counter = div_counter+1
    return div_counter


def numberOfDivisors(number):
    div_counter = 0
    upper_limit = math.sqrt(number)
    upper_limit = math.ceil(upper_limit)
    i = 1
    while i <= upper_limit:
        if number % i == 0:
            div_counter = div_counter+2
        i = i+1
    if upper_limit*upper_limit == number:
        div_counter = div_counter-1
    return div_counter


def problem12():
    i = 0
    sum = 0
    flag = False
    while not flag:
        i = i+1
        sum = sum+i
        # divNumber = findDivisors(sum)
        divNumber = numberOfDivisors(sum)
        if divNumber > 500:
            flag = True
    print(sum)


problem12()